# def gene_rate_bam_cmd(wildcards):
#     rmats_list = expand(output_dir + "rMATs/{group}.txt", group = list(set(samples.group.values.tolist())))
#     cmd_line = [
#         f"--b{index+1} {group_file} " for index, group_file in enumerate(rmats_list)
#     ]
#     return "".join(cmd_line)
def strand_map(wildcards):
    strand_map = {
        "reverse": "fr-firststrand",
        "forward": "fr-secondstrand",
        "none": "fr-unstranded"
    }
    strand_type = list(set(samples.Strand.values.tolist()))
    if len(strand_type) == 1:
        return strand_map[strand_type[0]]
    else:
        sys.exit("Error fund in rMATs, columns `Strand` must be unique for rMATs.")

def get_read_type(wildcards):
    id_map = {
        "SE":"single",
        "PE":"paired"
    }
    read_type = list(set(samples.type.values.tolist()))
    if len(read_type) == 1:
        return id_map[read_type[0]]
    else:
        sys.exit("Error fund in rMATs, columns `type` must be unique for rMATs.")

def get_read_len(wildcards):
    read_len = list(set(samples.Length.values.tolist()))
    if len(read_len) == 1:
        return read_len[0]
    else:
        sys.exit("Error fund in rMATs, columns `Length` must be unique for rMATs.")


rule bam_files_generate:
    input:
        bam_file = expand(output_dir + "STAR/{sample}.Aligned.sortedByCoord.out.bam", sample = samples.names.values.tolist()),
        bai_file = expand(output_dir + "STAR/{sample}.Aligned.sortedByCoord.out.bam.bai", sample = samples.names.values.tolist())
    output:
        bam_config = output_dir + "rMATs/bam.txt"
    params:
        prefix = output_dir + "rMATs/",
        bam_prefix = output_dir + "STAR/",

    run:
        with open(output.bam_config, "w") as file_to_write:
            file_to_write.write(
                ",".join(
                    [
                        f"{params.prefix}/{sample}.Aligned.sortedByCoord.out.bam" for sample in samples.names.values.tolist()
                    ]
                ) + "\n"
            )
rule rmats:
    input:
        rules.bam_files_generate.output
    output:
        output_dir + "rMATs/summary.txt"
    params:
        python = config["soft"]["python"],
        rmats = config["soft"]["rMATs"],
        gtf = config["gtf"],
        output_loc = output_dir + "rMATs/",
        read_type = get_read_type,
        read_len = get_read_len,
        cores = config["RSEM"]["cores"],
        strand = strand_map

    shell:
        """

        {params.python} {params.rmats} \
        --b1 {input} \
        --gtf {params.gtf} \
        --od {params.output_loc} \
        -t {params.read_type} \
        --nthread {params.cores} \
        --readLength {params.read_len} \
        --tmp {params.output_loc} \
        --statoff \
        --variable-read-length \
        --libType {params.strand}
        """